service: colab-infra
frameworkVersion: "2"

custom:
  stage: ${opt:stage, 'staging'}
  region: sa-east-1
  DYNAMO_TABLE: ${self:service}-db
  FirstSecondaryIndex: Index-Inverted
  SkStatus: SK-status
  appSync: ${file(./sls_extend/appSync.yaml)}
  appsync-simulator:
    port: 20002
    apiKey: da2-fakeApiId123456
    watch:
      - "*.graphql"       # => string like this is equivalent to `["match", "*.graphql"]`

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  lambdaHashingVersion: 20201221
  environment:
    DYNAMO_TABLE: ${self:custom.DYNAMO_TABLE}
    FirstSecondaryIndex: ${self:custom.FirstSecondaryIndex}
    SkStatus: ${self:custom.SkStatus}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:            
            - "dynamodb:PutItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:GetItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource: 
            - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.DYNAMO_TABLE}
            - arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.DYNAMO_TABLE}/index/${self:custom.FirstSecondaryIndex}

functions: 
  CREATE_POST:
    handler: functions/post.create
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter
  GET_POST:
    handler: functions/post.get
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter
  GET_LAST_POSTS:
    handler: functions/post.getLastPosts
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter
  GET_LAST_POST_VERSIONS:
    handler: functions/post.getLastPostVersions
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter
  UPDATE_POST:
    handler: functions/post.update
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter
  MINIMAL_UPDATE_POST:
    handler: functions/post.minimalUpdate
    environment:
      DYNAMO_TABLE_NAME: { "Ref": "DynamoTable"} # Alterado de !Ref DynamoTable para { "Ref": "DynamoTable"} apenas para resolver problema no linter

resources:
  Resources:
    DynamoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.DYNAMO_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.FirstSecondaryIndex}
            KeySchema: 
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection: 
              ProjectionType: ALL

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}
        AutoVerifiedAttributes:
            - email
        AliasAttributes:
            - email
        Schema:
            - AttributeDataType: String
              Name: role
              Mutable: true
            - AttributeDataType: String
              Name: username
              Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
      # DeletionPolicy: Retain
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
            - ADMIN_NO_SRP_AUTH
            - USER_PASSWORD_AUTH
        GenerateSecret: false
      # DeletionPolicy: Retain
plugins:
  - serverless-appsync-plugin
  - serverless-appsync-simulator
  - serverless-offline